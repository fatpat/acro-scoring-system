/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/auth/login": {
    /**
     * Login 
     * @description Get the JWT for a user with data from OAuth2 request form body.
     */
    post: operations["login_auth_login_post"];
  };
  "/auth/me": {
    /** Me */
    get: operations["me_auth_me_get"];
  };
  "/status/": {
    /** Get */
    get: operations["get_status__get"];
  };
  "/pilots/": {
    /** List */
    get: operations["list_pilots__get"];
  };
  "/pilots/{civlid}": {
    /** Get */
    get: operations["get_pilots__civlid__get"];
    /** Create */
    post: operations["create_pilots__civlid__post"];
  };
  "/pilots/update_all": {
    /** Sync */
    post: operations["sync_pilots_update_all_post"];
  };
  "/pilots/update_rankings": {
    /** Update Rankings */
    post: operations["update_rankings_pilots_update_rankings_post"];
  };
  "/pilots/{civlid}/gender": {
    /** Change Gender */
    patch: operations["change_gender_pilots__civlid__gender_patch"];
  };
  "/judges/": {
    /** List */
    get: operations["list_judges__get"];
  };
  "/judges/levels": {
    /** Get Levels */
    get: operations["get_levels_judges_levels_get"];
  };
  "/judges/{id}": {
    /** Get */
    get: operations["get_judges__id__get"];
    /** Update */
    put: operations["update_judges__id__put"];
    /** Delete */
    delete: operations["delete_judges__id__delete"];
  };
  "/judges/new": {
    /** Create */
    post: operations["create_judges_new_post"];
  };
  "/teams/": {
    /** List */
    get: operations["list_teams__get"];
  };
  "/teams/{id}": {
    /** Get */
    get: operations["get_teams__id__get"];
    /** Update */
    put: operations["update_teams__id__put"];
    /** Delete */
    delete: operations["delete_teams__id__delete"];
  };
  "/teams/new": {
    /** Create */
    post: operations["create_teams_new_post"];
  };
  "/tricks/": {
    /** List */
    get: operations["list_tricks__get"];
  };
  "/tricks/uniques": {
    /** Get Unique Tricks */
    get: operations["get_unique_tricks_tricks_uniques_get"];
  };
  "/tricks/bonuses": {
    /** Get Bonuses */
    get: operations["get_bonuses_tricks_bonuses_get"];
  };
  "/tricks/directions": {
    /** Get Directions */
    get: operations["get_directions_tricks_directions_get"];
  };
  "/tricks/unique/{id}": {
    /** Get Unique Trick */
    get: operations["get_unique_trick_tricks_unique__id__get"];
  };
  "/tricks/{id}": {
    /** Get */
    get: operations["get_tricks__id__get"];
    /** Update */
    put: operations["update_tricks__id__put"];
    /** Delete */
    delete: operations["delete_tricks__id__delete"];
  };
  "/tricks/new": {
    /** Create */
    post: operations["create_tricks_new_post"];
  };
  "/tricks/import": {
    /** Create Import */
    post: operations["create_import_tricks_import_post"];
  };
  "/competitions/": {
    /** List */
    get: operations["list_competitions__get"];
  };
  "/competitions/{id}": {
    /** Get By Id */
    get: operations["get_by_id_competitions__id__get"];
    /** Delete */
    delete: operations["delete_competitions__id__delete"];
    /** Update */
    patch: operations["update_competitions__id__patch"];
  };
  "/competitions/new": {
    /** Create */
    post: operations["create_competitions_new_post"];
  };
  "/competitions/{id}/pilots": {
    /** Patch Pilots */
    patch: operations["patch_pilots_competitions__id__pilots_patch"];
  };
  "/competitions/{id}/teams": {
    /** Patch Teams */
    patch: operations["patch_teams_competitions__id__teams_patch"];
  };
  "/competitions/{id}/judges": {
    /** Patch Judges */
    patch: operations["patch_judges_competitions__id__judges_patch"];
  };
  "/competitions/{id}/repeatable_tricks": {
    /** Patch Repeatable Tricks */
    patch: operations["patch_repeatable_tricks_competitions__id__repeatable_tricks_patch"];
  };
  "/competitions/{id}/config": {
    /** Patch Config */
    patch: operations["patch_config_competitions__id__config_patch"];
  };
  "/competitions/{id}/open": {
    /** Open */
    post: operations["open_competitions__id__open_post"];
  };
  "/competitions/{id}/close": {
    /** Close */
    post: operations["close_competitions__id__close_post"];
  };
  "/competitions/{id}/reopen": {
    /** Close */
    post: operations["close_competitions__id__reopen_post"];
  };
  "/competitions/{id}/runs/new": {
    /** New Run */
    post: operations["new_run_competitions__id__runs_new_post"];
  };
  "/competitions/{cid}/runs/{rid}": {
    /** Get Run */
    get: operations["get_run_competitions__cid__runs__rid__get"];
  };
  "/competitions/{id}/runs/{i}/pilots": {
    /** Patch Run Pilots */
    patch: operations["patch_run_pilots_competitions__id__runs__i__pilots_patch"];
  };
  "/competitions/{id}/runs/{i}/teams": {
    /** Patch Run Teams */
    patch: operations["patch_run_teams_competitions__id__runs__i__teams_patch"];
  };
  "/competitions/{id}/runs/{i}/judges": {
    /** Patch Run Judges */
    patch: operations["patch_run_judges_competitions__id__runs__i__judges_patch"];
  };
  "/competitions/{id}/runs/{i}/repeatable_tricks": {
    /** Patch Run Repeatable Tricks */
    patch: operations["patch_run_repeatable_tricks_competitions__id__runs__i__repeatable_tricks_patch"];
  };
  "/competitions/{id}/runs/{i}/config": {
    /** Patch Run Config */
    patch: operations["patch_run_config_competitions__id__runs__i__config_patch"];
  };
  "/competitions/{id}/runs/{i}/open": {
    /** Run Open */
    post: operations["run_open_competitions__id__runs__i__open_post"];
  };
  "/competitions/{id}/runs/{i}/close": {
    /** Run Close */
    post: operations["run_close_competitions__id__runs__i__close_post"];
  };
  "/competitions/{id}/runs/{i}/reopen": {
    /** Run Reopen */
    post: operations["run_reopen_competitions__id__runs__i__reopen_post"];
  };
  "/competitions/{id}/runs/{i}/flights/{pilot_team_id}": {
    /** Flight Get */
    get: operations["flight_get_competitions__id__runs__i__flights__pilot_team_id__get"];
  };
  "/competitions/{id}/runs/{i}/flights/{pilot_team_id}/new": {
    /** Flight Save */
    post: operations["flight_save_competitions__id__runs__i__flights__pilot_team_id__new_post"];
  };
  "/competitions/{id}/results": {
    /** Get All Results */
    get: operations["get_all_results_competitions__id__results_get"];
  };
  "/competitions/{id}/results/export": {
    /** Get Export Results */
    get: operations["get_export_results_competitions__id__results_export_get"];
  };
  "/competitions/{id}/results/{i}": {
    /** Run Get Results */
    get: operations["run_get_results_competitions__id__results__i__get"];
  };
  "/competitions/{id}/results/{i}/export": {
    /** Run Get Results */
    get: operations["run_get_results_competitions__id__results__i__export_get"];
  };
  "/scores/simulate/{t}": {
    /** Simulate */
    post: operations["simulate_scores_simulate__t__post"];
  };
  "/public/test": {
    /** Test */
    get: operations["test_public_test_get"];
  };
  "/public/pilots/": {
    /** List Pilots */
    get: operations["list_pilots_public_pilots__get"];
  };
  "/public/pilots/{civlid}": {
    /** Get Pilot */
    get: operations["get_pilot_public_pilots__civlid__get"];
  };
  "/public/teams/": {
    /** List Teams */
    get: operations["list_teams_public_teams__get"];
  };
  "/public/teams/{id}": {
    /** Get Team */
    get: operations["get_team_public_teams__id__get"];
  };
  "/public/judges/": {
    /** List Judges */
    get: operations["list_judges_public_judges__get"];
  };
  "/public/judges/{id}": {
    /** Get Judge */
    get: operations["get_judge_public_judges__id__get"];
  };
  "/public/competitions/": {
    /** List Competitions */
    get: operations["list_competitions_public_competitions__get"];
  };
  "/public/competitions/{id}": {
    /** Get Competition */
    get: operations["get_competition_public_competitions__id__get"];
  };
  "/public/seasons/": {
    /** List Seasons */
    get: operations["list_seasons_public_seasons__get"];
  };
  "/public/seasons/{id}": {
    /** Get Season */
    get: operations["get_season_public_seasons__id__get"];
  };
  "/public/tricks/": {
    /** List */
    get: operations["list_public_tricks__get"];
  };
  "/utils/backup": {
    /** Backup */
    get: operations["backup_utils_backup_get"];
  };
  "/utils/cleanup_pilots": {
    /** Backup */
    post: operations["backup_utils_cleanup_pilots_post"];
  };
  "/files/{id}": {
    /** Get File */
    get: operations["get_file_files__id__get"];
    /** Delete */
    delete: operations["delete_files__id__delete"];
  };
  "/files/new": {
    /** Post File */
    post: operations["post_file_files_new_post"];
  };
  "/seasons/": {
    /** List */
    get: operations["list_seasons__get"];
  };
  "/seasons/{id}": {
    /** Get */
    get: operations["get_seasons__id__get"];
    /** Update */
    put: operations["update_seasons__id__put"];
    /** Delete */
    delete: operations["delete_seasons__id__delete"];
  };
  "/seasons/{id}/export": {
    /** Export */
    get: operations["export_seasons__id__export_get"];
  };
  "/seasons/new": {
    /** Create */
    post: operations["create_seasons_new_post"];
  };
  "/": {
    /** Home */
    get: operations["home__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_login_auth_login_post */
    Body_login_auth_login_post: {
      /** Grant Type */
      grant_type?: string;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope 
       * @default
       */
      scope?: string;
      /** Client Id */
      client_id?: string;
      /** Client Secret */
      client_secret?: string;
    };
    /** Body_post_file_files_new_post */
    Body_post_file_files_new_post: {
      /**
       * File 
       * Format: binary
       */
      file: string;
    };
    /**
     * Bonus 
     * @example {
     *   "name": "twisted",
     *   "bonus": 2.5
     * }
     */
    Bonus: {
      /** Name */
      name: string;
      /** Bonus */
      bonus: number;
      /**
       * Sample Video 
       * Format: uri
       */
      sample_video?: string;
    };
    /**
     * CompetitionConfig 
     * @example {
     *   "warning": 0.5,
     *   "malus_repetition": 13,
     *   "warnings_to_dsq": 3,
     *   "judges_weight": {
     *     "senior": 100,
     *     "certified": 100,
     *     "trainee": 20
     *   },
     *   "mark_percentages": {
     *     "solo": {
     *       "technical": 40,
     *       "choreography": 40,
     *       "landing": 20
     *     },
     *     "synchro": {
     *       "technical": 25,
     *       "choreography": 25,
     *       "landing": 25,
     *       "synchro": 25
     *     }
     *   },
     *   "max_bonus_per_run": {
     *     "twist": 5,
     *     "reverse": 3,
     *     "flip": 1
     *   }
     * }
     */
    CompetitionConfig: {
      /**
       * Warning 
       * @description The point deduction for a warning 
       * @default 0.5
       */
      warning?: number;
      /**
       * Malus Repetition 
       * @description % reduction malus of choreography for repetition 
       * @default 13
       */
      malus_repetition?: number;
      /**
       * Warnings To Dsq 
       * @description number of warnings in a comp that lead to DSQ 
       * @default 3
       */
      warnings_to_dsq?: number;
      /**
       * Judge Weights 
       * @default {
       *   "senior": 100,
       *   "certified": 100,
       *   "trainee": 20
       * }
       */
      judge_weights?: components["schemas"]["JudgeWeights"];
      /**
       * Mark Percentages 
       * @default {
       *   "solo": {
       *     "technical": 40,
       *     "choreography": 40,
       *     "landing": 20
       *   },
       *   "synchro": {
       *     "technical": 20,
       *     "choreography": 20,
       *     "landing": 20,
       *     "synchro": 40
       *   }
       * }
       */
      mark_percentages?: components["schemas"]["MarkPercentages"];
      /**
       * Max Bonus Per Run 
       * @default {
       *   "twist": 5,
       *   "reverse": 3,
       *   "flip": 2
       * }
       */
      max_bonus_per_run?: components["schemas"]["MaxBonusPerRun"];
    };
    /** CompetitionExport */
    CompetitionExport: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Code */
      code: string;
      /**
       * Start Date 
       * Format: date
       */
      start_date: string;
      /**
       * End Date 
       * Format: date
       */
      end_date: string;
      /** Location */
      location: string;
      /** Published */
      published: boolean;
      type: components["schemas"]["CompetitionType"];
      /** Pilots */
      pilots: (components["schemas"]["Pilot"])[];
      /** Teams */
      teams: (components["schemas"]["TeamExport"])[];
      /** Judges */
      judges: (components["schemas"]["Judge"])[];
      /** Repeatable Tricks */
      repeatable_tricks: (components["schemas"]["Trick"])[];
      state: components["schemas"]["CompetitionState"];
      config: components["schemas"]["CompetitionConfig"];
      /** Runs */
      runs: (components["schemas"]["RunExport"])[];
      /**
       * Image 
       * Format: uri
       */
      image?: string;
      /**
       * Logo 
       * Format: uri
       */
      logo?: string;
      /**
       * Website 
       * Format: uri
       */
      website?: string;
      /** Seasons */
      seasons: (string)[];
    };
    /** CompetitionNew */
    CompetitionNew: {
      /** Name */
      name: string;
      /** Code */
      code?: string;
      /**
       * Start Date 
       * Format: date
       */
      start_date: string;
      /**
       * End Date 
       * Format: date
       */
      end_date: string;
      /** Location */
      location: string;
      /** Published */
      published: boolean;
      type: components["schemas"]["CompetitionType"];
      /** Image */
      image?: string;
      /** Logo */
      logo?: string;
      /**
       * Website 
       * Format: uri
       */
      website?: string;
      /**
       * Seasons 
       * @default []
       */
      seasons?: (string)[];
    };
    /** CompetitionPilotResultsExport */
    CompetitionPilotResultsExport: {
      pilot?: components["schemas"]["Pilot"];
      team?: components["schemas"]["TeamExport"];
      /** Result Per Run */
      result_per_run: (components["schemas"]["RunResultSummary"])[];
      /** Score */
      score: number;
    };
    /** CompetitionPublicExport */
    CompetitionPublicExport: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Code */
      code: string;
      /**
       * Start Date 
       * Format: date
       */
      start_date: string;
      /**
       * End Date 
       * Format: date
       */
      end_date: string;
      /** Location */
      location: string;
      /** Published */
      published: boolean;
      type: components["schemas"]["CompetitionType"];
      state: components["schemas"]["CompetitionState"];
      /** Number Of Pilots */
      number_of_pilots: number;
      /** Number Of Teams */
      number_of_teams: number;
      /** Number Of Judges */
      number_of_judges: number;
      /** Number Of Runs */
      number_of_runs: number;
      /**
       * Image 
       * Format: uri
       */
      image?: string;
      /**
       * Logo 
       * Format: uri
       */
      logo?: string;
      /**
       * Website 
       * Format: uri
       */
      website?: string;
      /** Seasons */
      seasons: (string)[];
    };
    /** CompetitionPublicExportWithResults */
    CompetitionPublicExportWithResults: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Code */
      code: string;
      /**
       * Start Date 
       * Format: date
       */
      start_date: string;
      /**
       * End Date 
       * Format: date
       */
      end_date: string;
      /** Location */
      location: string;
      /** Published */
      published: boolean;
      type: components["schemas"]["CompetitionType"];
      state: components["schemas"]["CompetitionState"];
      /** Number Of Pilots */
      number_of_pilots: number;
      /** Number Of Teams */
      number_of_teams: number;
      /** Number Of Judges */
      number_of_judges: number;
      /** Number Of Runs */
      number_of_runs: number;
      /**
       * Image 
       * Format: uri
       */
      image?: string;
      /**
       * Logo 
       * Format: uri
       */
      logo?: string;
      /**
       * Website 
       * Format: uri
       */
      website?: string;
      /** Seasons */
      seasons: (string)[];
      results: components["schemas"]["CompetitionResultsExport"];
      /** Pilots */
      pilots: (components["schemas"]["Pilot"])[];
      /** Teams */
      teams: (components["schemas"]["TeamExport"])[];
      /** Judges */
      judges: (components["schemas"]["Judge"])[];
    };
    /** CompetitionResult */
    CompetitionResult: {
      competition: components["schemas"]["CompetitionPublicExport"];
      /** Rank */
      rank: number;
    };
    /** CompetitionResultsExport */
    CompetitionResultsExport: {
      /** Final */
      final: boolean;
      /** Type */
      type: string;
      /** Overall Results */
      overall_results: (components["schemas"]["CompetitionPilotResultsExport"])[];
      /** Runs Results */
      runs_results: (components["schemas"]["RunResultsExport"])[];
    };
    /**
     * CompetitionState 
     * @description An enumeration. 
     * @enum {string}
     */
    CompetitionState: "init" | "open" | "closed";
    /**
     * CompetitionType 
     * @description An enumeration. 
     * @enum {string}
     */
    CompetitionType: "solo" | "synchro";
    /** FileID */
    FileID: {
      /** Id */
      id: string;
    };
    /**
     * FinalMark 
     * @example {
     *   "judges_mark": {
     *     "judge": "Average of the judges marks",
     *     "technical": 2.5,
     *     "choreography": 7,
     *     "landing": 7,
     *     "synchro": 7
     *   },
     *   "technicity": 1.87,
     *   "bonus_percentage": 23,
     *   "technical": 7,
     *   "choreography": 6,
     *   "landing": 7,
     *   "synchro": 7,
     *   "bonus": 1.23,
     *   "score": 9.244,
     *   "warnings": [
     *     "box",
     *     "late at briefing"
     *   ],
     *   "malus": 13,
     *   "notes": [
     *     "Yellow card: big ear to start the run"
     *   ]
     * }
     */
    FinalMark: {
      judges_mark: components["schemas"]["JudgeMark"];
      /** Technicity */
      technicity: number;
      /** Bonus Percentage */
      bonus_percentage: number;
      /** Technical */
      technical: number;
      /** Choreography */
      choreography: number;
      /** Landing */
      landing: number;
      /** Synchro */
      synchro: number;
      /** Bonus */
      bonus: number;
      /** Score */
      score: number;
      /** Warnings */
      warnings: (string)[];
      /** Malus */
      malus: number;
      /**
       * Notes 
       * @default []
       */
      notes?: (string)[];
    };
    /** FinalMarkExport */
    FinalMarkExport: {
      judges_mark: components["schemas"]["JudgeMarkExport"];
      /** Technicity */
      technicity: number;
      /** Bonus Percentage */
      bonus_percentage: number;
      /** Technical */
      technical: number;
      /** Choreography */
      choreography: number;
      /** Landing */
      landing: number;
      /** Synchro */
      synchro: number;
      /** Bonus */
      bonus: number;
      /** Score */
      score: number;
      /** Warnings */
      warnings: (string)[];
      /** Malus */
      malus: number;
      /** Notes */
      notes: (string)[];
    };
    /**
     * Flight 
     * @example {
     *   "pilot": 1234,
     *   "tricks": [],
     *   "marks": [],
     *   "did_not_start": false,
     *   "final_marks": {},
     *   "published": false,
     *   "warnings": []
     * }
     */
    Flight: {
      /** Pilot */
      pilot: number;
      /** Team */
      team?: string;
      /** Tricks */
      tricks: (components["schemas"]["UniqueTrick"])[];
      /** Marks */
      marks: (components["schemas"]["JudgeMark"])[];
      /**
       * Did Not Start 
       * @default false
       */
      did_not_start?: boolean;
      final_marks?: components["schemas"]["FinalMark"];
      /**
       * Published 
       * @default false
       */
      published?: boolean;
      /** Warnings */
      warnings: (string)[];
    };
    /** FlightExport */
    FlightExport: {
      pilot?: components["schemas"]["Pilot"];
      team?: components["schemas"]["TeamExport"];
      /** Tricks */
      tricks: (components["schemas"]["UniqueTrick"])[];
      /** Marks */
      marks: (components["schemas"]["JudgeMarkExport"])[];
      /**
       * Did Not Start 
       * @default false
       */
      did_not_start?: boolean;
      final_marks?: components["schemas"]["FinalMarkExport"];
      /**
       * Published 
       * @default false
       */
      published?: boolean;
      /** Warnings */
      warnings: (string)[];
    };
    /**
     * FlightNew 
     * @example {
     *   "tricks": [
     *     "LM",
     *     "Right Misty Flip"
     *   ],
     *   "marks": [],
     *   "did_not_start": false,
     *   "warnings": []
     * }
     */
    FlightNew: {
      /** Tricks */
      tricks: (string)[];
      /** Marks */
      marks: (components["schemas"]["JudgeMark"])[];
      /**
       * Did Not Start 
       * @default false
       */
      did_not_start?: boolean;
      /**
       * Warnings 
       * @default []
       */
      warnings?: (string)[];
    };
    /**
     * GenderEnum 
     * @description An enumeration. 
     * @enum {string}
     */
    GenderEnum: "man" | "woman" | "none";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /**
     * Judge 
     * @example {
     *   "name": "Jerry The Judge",
     *   "country": "fra",
     *   "level": "certified",
     *   "civlid": 1234
     * }
     */
    Judge: {
      /** Id */
      _id?: string;
      /**
       * Name 
       * @description The full name of the judge
       */
      name: string;
      /**
       * Country 
       * @description The country of the judge using the 3 letter acronym of the country
       */
      country: string;
      /** @description The level of the judge */
      level: components["schemas"]["JudgeLevel"];
      /**
       * Civlid 
       * @description The CIVL ID if any (must be registered in the pilot database
       */
      civlid?: number;
      /**
       * Deleted 
       * Format: date-time
       */
      deleted?: string;
    };
    /**
     * JudgeLevel 
     * @description An enumeration. 
     * @enum {unknown}
     */
    JudgeLevel: "trainee" | "certified" | "senior";
    /**
     * JudgeMark 
     * @example {
     *   "judge": "Jerry The Judge",
     *   "technical": 2.5,
     *   "choreography": 7,
     *   "landing": 7,
     *   "synchro": 7
     * }
     */
    JudgeMark: {
      /** Judge */
      judge: string;
      /** Technical */
      technical?: number;
      /** Choreography */
      choreography?: number;
      /** Landing */
      landing?: number;
      /** Synchro */
      synchro?: number;
    };
    /** JudgeMarkExport */
    JudgeMarkExport: {
      judge?: components["schemas"]["Judge"];
      /** Technical */
      technical?: number;
      /** Choreography */
      choreography?: number;
      /** Landing */
      landing?: number;
      /** Synchro */
      synchro?: number;
    };
    /**
     * JudgeWeights 
     * @example {
     *   "senior": 100,
     *   "certified": 100,
     *   "trainee": 20
     * }
     */
    JudgeWeights: {
      /**
       * Senior 
       * @description weight of a senior judge's mark 
       * @default 100
       */
      senior?: number;
      /**
       * Certified 
       * @description weight of a certified judge's mark 
       * @default 100
       */
      certified?: number;
      /**
       * Trainee 
       * @description weight of a trainee judge's mark 
       * @default 20
       */
      trainee?: number;
    };
    /** Link */
    Link: {
      /** Name */
      name: string;
      /**
       * Link 
       * Format: uri
       */
      link: string;
    };
    /**
     * MarkPercentageSolo 
     * @example {
     *   "technical": 40,
     *   "choreography": 40,
     *   "landing": 20
     * }
     */
    MarkPercentageSolo: {
      /**
       * Technical 
       * @description % of the technical part in the final score for solo runs 
       * @default 40
       */
      technical?: number;
      /**
       * Choreography 
       * @description % of the choreography part in the final score for solo runs 
       * @default 40
       */
      choreography?: number;
      /**
       * Landing 
       * @description % of the landing part in the final score for solo runs 
       * @default 20
       */
      landing?: number;
    };
    /**
     * MarkPercentageSynchro 
     * @example {
     *   "technical": 25,
     *   "choreography": 25,
     *   "landing": 25,
     *   "synchro": 25
     * }
     */
    MarkPercentageSynchro: {
      /**
       * Technical 
       * @description % of the technical part in the final score for synchro runs 
       * @default 20
       */
      technical?: number;
      /**
       * Choreography 
       * @description % of the choreography part in the final score for synchro runs 
       * @default 20
       */
      choreography?: number;
      /**
       * Landing 
       * @description % of the landing part in the final score for synchro runs 
       * @default 20
       */
      landing?: number;
      /**
       * Synchro 
       * @description % of the synchro part in the final score for synchro runs 
       * @default 40
       */
      synchro?: number;
    };
    /**
     * MarkPercentages 
     * @example {
     *   "solo": {
     *     "technical": 40,
     *     "choreography": 40,
     *     "landing": 20
     *   },
     *   "synchro": {
     *     "technical": 25,
     *     "choreography": 25,
     *     "landing": 25,
     *     "synchro": 25
     *   }
     * }
     */
    MarkPercentages: {
      /**
       * Solo 
       * @default {
       *   "technical": 40,
       *   "choreography": 40,
       *   "landing": 20
       * }
       */
      solo?: components["schemas"]["MarkPercentageSolo"];
      /**
       * Synchro 
       * @default {
       *   "technical": 20,
       *   "choreography": 20,
       *   "landing": 20,
       *   "synchro": 40
       * }
       */
      synchro?: components["schemas"]["MarkPercentageSynchro"];
    };
    /**
     * MaxBonusPerRun 
     * @example {
     *   "twist": 5,
     *   "reverse": 3,
     *   "flip": 1
     * }
     */
    MaxBonusPerRun: {
      /**
       * Twist 
       * @description maximum number of twisted tricks per run 
       * @default 5
       */
      twist?: number;
      /**
       * Reverse 
       * @description maximum number of reverse tricks per run 
       * @default 3
       */
      reverse?: number;
      /**
       * Flip 
       * @description maximum number of flip tricks per run 
       * @default 2
       */
      flip?: number;
    };
    /**
     * Pilot 
     * @example {
     *   "civlid": 67619,
     *   "name": "Luke de Weert",
     *   "civl_link": "https://civlcomps.org/pilot/67619",
     *   "country": "nld",
     *   "about": "\"I am an athlete who believes that dedication is the core of the thing that keeps me pushing and motivating me to achieve all my goals, and even set new goals where I never thought it was possible.\"",
     *   "social_links": [
     *     {
     *       "name": "facebook",
     *       "link": "https://www.facebook.com/deweert.luke"
     *     },
     *     {
     *       "name": "instagram",
     *       "link": "https://www.instagram.com/luke_deweert/"
     *     },
     *     {
     *       "name": "twitter",
     *       "link": "https://twitter.com/luke_deweert"
     *     },
     *     {
     *       "name": "youtube",
     *       "link": "https://www.youtube.com/lukedeweert"
     *     },
     *     {
     *       "name": "Website",
     *       "link": "https://lukedeweert.nl"
     *     },
     *     {
     *       "name": "Tiktok",
     *       "link": "https://www.tiktok.com/@lukedeweert"
     *     }
     *   ],
     *   "sponsors": [
     *     {
     *       "name": "Sky Paragliders",
     *       "link": "https://sky-cz.com/en",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/4cbe1ebac175a9cde7a4c9d8769ba0c4/509e4e83c097d02828403b5a67e8c0b5.png"
     *     },
     *     {
     *       "name": "Sinner",
     *       "link": "https://www.sinner.eu/nl/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/dddccfa819ee01d9b2410ba49fa432fc/eeff42d05ffefb8ef945dc83485007ea.png"
     *     },
     *     {
     *       "name": "Wanbound",
     *       "link": "https://www.wanbound.com/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/aa675f347b7d7933332df96f08b21199/4ff22ae0404446f203ba682751e1e7b8.png"
     *     },
     *     {
     *       "name": "KNVvL",
     *       "link": "https://www.knvvl.nl/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/53ee05f2c2172541b7f1dd99e67a59f9/0f68789e476c0494019a750a6da9c6aa.png"
     *     }
     *   ],
     *   "photo": "https://civlcomps.org/uploads/resize/profile/header/676/7bdecbee5d2246b1ebc14248dc1af935/8bfbe7e62a481a19145c55c9dc97e6ab.jpeg",
     *   "photo_highres": "https://civlcomps.org/uploads/images/profile/676/7bdecbee5d2246b1ebc14248dc1af935/8bfbe7e62a481a19145c55c9dc97e6ab.jpeg",
     *   "background_picture": "https://civlcomps.org/uploads/images/pilot_header/9/c017697641aa9ef817c4c17728e9e6d6/08788da048eea61f93be8591e97f6a0c.jpg",
     *   "last_update": "2022-06-03T19:05:59.325692",
     *   "rank": 2
     * }
     */
    Pilot: {
      /** Id */
      _id: number;
      /**
       * Civlid 
       * @description The CIVL ID of the pilot
       */
      civlid: number;
      /**
       * Name 
       * @description The complete name of the pilot
       */
      name: string;
      /**
       * Civl Link 
       * Format: uri 
       * @description The link to the CIVL pilot page
       */
      civl_link: string;
      /**
       * Country 
       * @description The country of the pilot
       */
      country: string;
      /**
       * About 
       * @description About text of the pilot
       */
      about: string;
      /**
       * Social Links 
       * @description List of pilot's links (socials medias, ...)
       */
      social_links: (components["schemas"]["Link"])[];
      /**
       * Sponsors 
       * @description List of the pilot's sponsors
       */
      sponsors: (components["schemas"]["Sponsor"])[];
      /**
       * Photo 
       * Format: uri 
       * @description Link to the profile image of the pilot
       */
      photo: string;
      /**
       * Photo Highres 
       * Format: uri 
       * @description Link to the highres profile image of the pilot
       */
      photo_highres?: string;
      /**
       * Background Picture 
       * Format: uri 
       * @description Link to the background profile image of the pilot
       */
      background_picture: string;
      /**
       * Last Update 
       * Format: date-time 
       * @description Last time the pilot has been updated
       */
      last_update?: string;
      /**
       * Rank 
       * @description Current pilot's ranking in the aerobatic solo overwall world ranking
       */
      rank: number;
      /**
       * @description Pilot's sex 
       * @default man
       */
      gender?: components["schemas"]["GenderEnum"];
    };
    /**
     * PilotWithResults 
     * @example {
     *   "civlid": 67619,
     *   "name": "Luke de Weert",
     *   "civl_link": "https://civlcomps.org/pilot/67619",
     *   "country": "nld",
     *   "about": "\"I am an athlete who believes that dedication is the core of the thing that keeps me pushing and motivating me to achieve all my goals, and even set new goals where I never thought it was possible.\"",
     *   "social_links": [
     *     {
     *       "name": "facebook",
     *       "link": "https://www.facebook.com/deweert.luke"
     *     },
     *     {
     *       "name": "instagram",
     *       "link": "https://www.instagram.com/luke_deweert/"
     *     },
     *     {
     *       "name": "twitter",
     *       "link": "https://twitter.com/luke_deweert"
     *     },
     *     {
     *       "name": "youtube",
     *       "link": "https://www.youtube.com/lukedeweert"
     *     },
     *     {
     *       "name": "Website",
     *       "link": "https://lukedeweert.nl"
     *     },
     *     {
     *       "name": "Tiktok",
     *       "link": "https://www.tiktok.com/@lukedeweert"
     *     }
     *   ],
     *   "sponsors": [
     *     {
     *       "name": "Sky Paragliders",
     *       "link": "https://sky-cz.com/en",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/4cbe1ebac175a9cde7a4c9d8769ba0c4/509e4e83c097d02828403b5a67e8c0b5.png"
     *     },
     *     {
     *       "name": "Sinner",
     *       "link": "https://www.sinner.eu/nl/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/dddccfa819ee01d9b2410ba49fa432fc/eeff42d05ffefb8ef945dc83485007ea.png"
     *     },
     *     {
     *       "name": "Wanbound",
     *       "link": "https://www.wanbound.com/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/aa675f347b7d7933332df96f08b21199/4ff22ae0404446f203ba682751e1e7b8.png"
     *     },
     *     {
     *       "name": "KNVvL",
     *       "link": "https://www.knvvl.nl/",
     *       "img": "https://civlcomps.org/uploads/images/ems_event_sponsor_logo/1/53ee05f2c2172541b7f1dd99e67a59f9/0f68789e476c0494019a750a6da9c6aa.png"
     *     }
     *   ],
     *   "photo": "https://civlcomps.org/uploads/resize/profile/header/676/7bdecbee5d2246b1ebc14248dc1af935/8bfbe7e62a481a19145c55c9dc97e6ab.jpeg",
     *   "photo_highres": "https://civlcomps.org/uploads/images/profile/676/7bdecbee5d2246b1ebc14248dc1af935/8bfbe7e62a481a19145c55c9dc97e6ab.jpeg",
     *   "background_picture": "https://civlcomps.org/uploads/images/pilot_header/9/c017697641aa9ef817c4c17728e9e6d6/08788da048eea61f93be8591e97f6a0c.jpg",
     *   "last_update": "2022-06-03T19:05:59.325692",
     *   "rank": 2
     * }
     */
    PilotWithResults: {
      /** Id */
      _id: number;
      /**
       * Civlid 
       * @description The CIVL ID of the pilot
       */
      civlid: number;
      /**
       * Name 
       * @description The complete name of the pilot
       */
      name: string;
      /**
       * Civl Link 
       * Format: uri 
       * @description The link to the CIVL pilot page
       */
      civl_link: string;
      /**
       * Country 
       * @description The country of the pilot
       */
      country: string;
      /**
       * About 
       * @description About text of the pilot
       */
      about: string;
      /**
       * Social Links 
       * @description List of pilot's links (socials medias, ...)
       */
      social_links: (components["schemas"]["Link"])[];
      /**
       * Sponsors 
       * @description List of the pilot's sponsors
       */
      sponsors: (components["schemas"]["Sponsor"])[];
      /**
       * Photo 
       * Format: uri 
       * @description Link to the profile image of the pilot
       */
      photo: string;
      /**
       * Photo Highres 
       * Format: uri 
       * @description Link to the highres profile image of the pilot
       */
      photo_highres?: string;
      /**
       * Background Picture 
       * Format: uri 
       * @description Link to the background profile image of the pilot
       */
      background_picture: string;
      /**
       * Last Update 
       * Format: date-time 
       * @description Last time the pilot has been updated
       */
      last_update?: string;
      /**
       * Rank 
       * @description Current pilot's ranking in the aerobatic solo overwall world ranking
       */
      rank: number;
      /**
       * @description Pilot's sex 
       * @default man
       */
      gender?: components["schemas"]["GenderEnum"];
      /**
       * Competitions Results 
       * @description List of competitions results 
       * @default []
       */
      competitions_results?: (components["schemas"]["CompetitionResult"])[];
      /**
       * Seasons Results 
       * @description List of seasons results 
       * @default []
       */
      seasons_results?: (components["schemas"]["models__pilots_with_results__SeasonResult"])[];
    };
    /** RunExport */
    RunExport: {
      state: components["schemas"]["RunState"];
      /** Pilots */
      pilots: (components["schemas"]["Pilot"])[];
      /** Teams */
      teams: (components["schemas"]["TeamExport"])[];
      /** Judges */
      judges: (components["schemas"]["Judge"])[];
      /** Repeatable Tricks */
      repeatable_tricks: (components["schemas"]["Trick"])[];
      config: components["schemas"]["CompetitionConfig"];
      /** Flights */
      flights: (components["schemas"]["FlightExport"])[];
    };
    /**
     * RunResultSummary 
     * @example {
     *   "rank": "1",
     *   "score": 12.5
     * }
     */
    RunResultSummary: {
      /** Rank */
      rank: number;
      /** Score */
      score: number;
    };
    /** RunResultsExport */
    RunResultsExport: {
      /** Final */
      final: boolean;
      /** Type */
      type: string;
      /** Results */
      results: (components["schemas"]["FlightExport"])[];
    };
    /**
     * RunState 
     * @description An enumeration. 
     * @enum {string}
     */
    RunState: "init" | "open" | "closed";
    /**
     * Season 
     * @example {
     *   "name": "Acro World Tour 2022",
     *   "code": "awt-2022"
     * }
     */
    Season: {
      /** Id */
      _id?: string;
      /**
       * Name 
       * @description The name of the season
       */
      name: string;
      /**
       * Code 
       * @description The short code of the season
       */
      code: string;
      /**
       * Year 
       * @description The year of the season
       */
      year: number;
      /** Image */
      image?: string;
      /**
       * Image Url 
       * Format: uri
       */
      image_url?: string;
      /** Country */
      country?: string;
      /**
       * Index 
       * @default 999
       */
      index?: number;
      /**
       * Deleted 
       * Format: date-time
       */
      deleted?: string;
    };
    /** SeasonExport */
    SeasonExport: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Code */
      code: string;
      /** Year */
      year: number;
      /**
       * Image 
       * Format: uri
       */
      image?: string;
      /** Country */
      country?: string;
      /**
       * Index 
       * @default 999
       */
      index?: number;
      type: components["schemas"]["CompetitionType"];
      /** Number Of Pilots */
      number_of_pilots: number;
      /** Number Of Teams */
      number_of_teams: number;
      /** Competitions */
      competitions: (components["schemas"]["CompetitionPublicExportWithResults"])[];
      /** Results */
      results: (components["schemas"]["SeasonResults"])[];
    };
    /** SeasonResults */
    SeasonResults: {
      /** Type */
      type: string;
      /** Results */
      results: (components["schemas"]["models__seasons__SeasonResult"])[];
    };
    /** Sponsor */
    Sponsor: {
      /** Name */
      name: string;
      /**
       * Link 
       * Format: uri
       */
      link: string;
      /** Img */
      img: string;
    };
    /**
     * Status 
     * @example {
     *   "project": "Acropyx2",
     *   "version": "2.0.1"
     * }
     */
    Status: {
      /** Project */
      project: string;
      /** Version */
      version: string;
    };
    /**
     * Team 
     * @example {
     *   "_id": "687687687687aze",
     *   "name": "Team Rocket",
     *   "pilots": [
     *     1234,
     *     4567
     *   ]
     * }
     */
    Team: {
      /** Id */
      _id?: string;
      /**
       * Name 
       * @description The name of the team
       */
      name: string;
      /**
       * Pilots 
       * @description The 2 pilots composing the team (by CIVLID)
       */
      pilots: (number)[];
      /**
       * Deleted 
       * Format: date-time
       */
      deleted?: string;
    };
    /** TeamExport */
    TeamExport: {
      /** Id */
      _id: string;
      /** Name */
      name: string;
      /** Pilots */
      pilots: (components["schemas"]["Pilot"])[];
    };
    /**
     * Trick 
     * @example {
     *   "_id": "bababababaabababababab",
     *   "name": "Misty to Helicopter",
     *   "acronym": "MH",
     *   "solo": true,
     *   "synchro": true,
     *   "directions": [
     *     "left",
     *     "right"
     *   ],
     *   "technical_coefficient": 1.75,
     *   "bonuses": [
     *     {
     *       "name": "twisted",
     *       "bonus": 3
     *     },
     *     {
     *       "name": "reverse",
     *       "bonus": 3
     *     }
     *   ],
     *   "first_maneuver": 0,
     *   "no_first_maneuver": 0,
     *   "last_maneuver": 0,
     *   "no_last_maneuver": 0,
     *   "repeatable": false,
     *   "tricks": [
     *     {
     *       "name": "left Misty to Helicopter",
     *       "acronym": "LMH",
     *       "technical_coefficient": 1.75,
     *       "bonus": 0
     *     },
     *     {
     *       "name": "right Misty to Helicopter",
     *       "acronym": "RMH",
     *       "technical_coefficient": 1.75,
     *       "bonus": 0
     *     },
     *     {
     *       "name": "twisted left Misty to Helicopter",
     *       "acronym": "/LMH",
     *       "technical_coefficient": 1.75,
     *       "bonus": 3
     *     },
     *     {
     *       "name": "twisted right Misty to Helicopter",
     *       "acronym": "/RMH",
     *       "technical_coefficient": 1.75,
     *       "bonus": 3
     *     },
     *     {
     *       "name": "left Misty to Helicopter reverse",
     *       "acronym": "LMHR",
     *       "technical_coefficient": 1.75,
     *       "bonus": 3
     *     },
     *     {
     *       "name": "right Misty to Helicopter reverse",
     *       "acronym": "RMHR",
     *       "technical_coefficient": 1.75,
     *       "bonus": 3
     *     },
     *     {
     *       "name": "twisted left Misty to Helicopter reverse",
     *       "acronym": "/LMHR",
     *       "technical_coefficient": 1.75,
     *       "bonus": 6
     *     },
     *     {
     *       "name": "twisted right Misty to Helicopter reverse",
     *       "acronym": "/RMHR",
     *       "technical_coefficient": 1.75,
     *       "bonus": 6
     *     }
     *   ]
     * }
     */
    Trick: {
      /** Id */
      _id?: string;
      /**
       * Name 
       * @description The name of the trick (without bonuses)
       */
      name: string;
      /**
       * Acronym 
       * @description The acronym of the trick (without bonuses)
       */
      acronym: string;
      /**
       * Solo 
       * @description Is this trick valid for solo competitions
       */
      solo: boolean;
      /**
       * Synchro 
       * @description Is this trick valid for synchro competitions
       */
      synchro: boolean;
      /**
       * Directions 
       * @description List of allowed diredctions for the trick. Empty list implies a trick with a unique direction
       */
      directions: (string)[];
      /**
       * Technical Coefficient 
       * @description The technical coefficient of the trick
       */
      technical_coefficient: number;
      /**
       * Bonuses 
       * @description List of all bonuses that can apply to this trick
       */
      bonuses: (components["schemas"]["Bonus"])[];
      /**
       * Bonus Constraints 
       * @description List of bonuses that are exclusive to each other 
       * @default []
       */
      bonus_constraints?: ((string)[])[];
      /**
       * First Maneuver 
       * @description If positive, indicates that the trick must be performed in the first N tricks of the run 
       * @default 0
       */
      first_maneuver?: number;
      /**
       * No First Maneuver 
       * @description If positive, indicates that the trick must not be performed in the first N tricks of the run 
       * @default 0
       */
      no_first_maneuver?: number;
      /**
       * Last Maneuver 
       * @description If positive, indicates that the trick must be performed in the last N tricks of the run 
       * @default 0
       */
      last_maneuver?: number;
      /**
       * No Last Maneuver 
       * @description If positive, indicates that the trick must not be performed in the last N tricks of the run 
       * @default 0
       */
      no_last_maneuver?: number;
      /**
       * Tricks 
       * @description List of all the variant of the trick (this is automatically generated) 
       * @default []
       */
      tricks?: (components["schemas"]["UniqueTrick"])[];
      /**
       * Repeatable 
       * @description Is this trick can be repeatable 
       * @default false
       */
      repeatable?: boolean;
      /**
       * Deleted 
       * Format: date-time
       */
      deleted?: string;
      /**
       * Sample Video 
       * Format: uri
       */
      sample_video?: string;
    };
    /**
     * UniqueTrick 
     * @example {
     *   "name": "twisted left Misty to Helicopter reverse",
     *   "acronym": "/LMHR",
     *   "technical_coefficient": 1.75,
     *   "bonus": 6,
     *   "bonus_types": [
     *     "twist",
     *     "reverse"
     *   ],
     *   "uniqueness": [
     *     "left",
     *     "reverse"
     *   ],
     *   "base_trick": "Misty To Helicoper"
     * }
     */
    UniqueTrick: {
      /** Name */
      name: string;
      /** Acronym */
      acronym: string;
      /** Technical Coefficient */
      technical_coefficient: number;
      /** Bonus */
      bonus: number;
      /** Bonus Types */
      bonus_types: (string)[];
      /** Base Trick */
      base_trick: string;
      /** Uniqueness */
      uniqueness: (string)[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** SeasonResult */
    models__pilots_with_results__SeasonResult: {
      season: components["schemas"]["Season"];
      /** Rank */
      rank: number;
    };
    /** SeasonResult */
    models__seasons__SeasonResult: {
      pilot?: components["schemas"]["Pilot"];
      team?: components["schemas"]["TeamExport"];
      /** Score */
      score: number;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Login 
   * @description Get the JWT for a user with data from OAuth2 request form body.
   */
  login_auth_login_post: {
    requestBody: {
      content: {
        "application/x-www-form-urlencoded": components["schemas"]["Body_login_auth_login_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Me */
  me_auth_me_get: {
    responses: {
      /** @description return user informations */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Get */
  get_status__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Status"];
        };
      };
    };
  };
  /** List */
  list_pilots__get: {
    responses: {
      /** @description List all pilots */
      200: {
        content: {
          "application/json": (components["schemas"]["Pilot"])[];
        };
      };
    };
  };
  /** Get */
  get_pilots__civlid__get: {
    parameters: {
      path: {
        civlid: number;
      };
    };
    responses: {
      /** @description Get a Pilot */
      200: {
        content: {
          "application/json": components["schemas"]["Pilot"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_pilots__civlid__post: {
    parameters: {
      path: {
        civlid: number;
      };
    };
    responses: {
      /** @description Add new Pilot */
      201: {
        content: {
          "application/json": components["schemas"]["Pilot"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Sync */
  sync_pilots_update_all_post: {
    responses: {
      /** @description Create all missing pilots from CIVL database */
      201: never;
    };
  };
  /** Update Rankings */
  update_rankings_pilots_update_rankings_post: {
    responses: {
      /** @description Update ranking of all registered pilots from CIVL database */
      201: never;
    };
  };
  /** Change Gender */
  change_gender_pilots__civlid__gender_patch: {
    parameters: {
      path: {
        civlid: number;
      };
    };
    responses: {
      /** @description Change pilot gender */
      200: {
        content: {
          "application/json": components["schemas"]["Pilot"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_judges__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
    };
    responses: {
      /** @description List all judges */
      200: {
        content: {
          "application/json": (components["schemas"]["Judge"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Levels */
  get_levels_judges_levels_get: {
    responses: {
      /** @description Get list of judges levels */
      200: {
        content: {
          "application/json": (components["schemas"]["JudgeLevel"])[];
        };
      };
    };
  };
  /** Get */
  get_judges__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Judge */
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_judges__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Judge"];
      };
    };
    responses: {
      /** @description Add new Judge */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_judges__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a Judge */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_judges_new_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Judge"];
      };
    };
    responses: {
      /** @description Add new Judge */
      201: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_teams__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
    };
    responses: {
      /** @description List all teams */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamExport"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_teams__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Team */
      200: {
        content: {
          "application/json": components["schemas"]["TeamExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_teams__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
      };
    };
    responses: {
      /** @description Update an existing Team */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_teams__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a Team */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_teams_new_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Team"];
      };
    };
    responses: {
      /** @description Add new Team */
      201: {
        content: {
          "application/json": components["schemas"]["TeamExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_tricks__get: {
    parameters: {
      query?: {
        deleted?: boolean;
        repeatable?: boolean;
      };
    };
    responses: {
      /** @description List all tricks */
      200: {
        content: {
          "application/json": (components["schemas"]["Trick"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Unique Tricks */
  get_unique_tricks_tricks_uniques_get: {
    parameters: {
      query?: {
        solo?: boolean;
        synchro?: boolean;
      };
    };
    responses: {
      /** @description Get all unique tricks */
      200: {
        content: {
          "application/json": (components["schemas"]["UniqueTrick"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Bonuses */
  get_bonuses_tricks_bonuses_get: {
    responses: {
      /** @description Get available bonuses */
      200: {
        content: {
          "application/json": (Record<string, never>)[];
        };
      };
    };
  };
  /** Get Directions */
  get_directions_tricks_directions_get: {
    responses: {
      /** @description Get available directions */
      200: {
        content: {
          "application/json": (Record<string, never>)[];
        };
      };
    };
  };
  /** Get Unique Trick */
  get_unique_trick_tricks_unique__id__get: {
    parameters: {
      path: {
        id: unknown;
      };
    };
    responses: {
      /** @description Get a Unique Trick */
      200: {
        content: {
          "application/json": components["schemas"]["UniqueTrick"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_tricks__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Trick */
      200: {
        content: {
          "application/json": components["schemas"]["Trick"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_tricks__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Trick"];
      };
    };
    responses: {
      /** @description Update existing Trick */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_tricks__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a Trick */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_tricks_new_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Trick"];
      };
    };
    responses: {
      /** @description Add new Trick */
      201: {
        content: {
          "application/json": components["schemas"]["Trick"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Import */
  create_import_tricks_import_post: {
    requestBody: {
      content: {
        "application/json": (components["schemas"]["Trick"])[];
      };
    };
    responses: {
      /** @description Add new Trick */
      201: {
        content: {
          "application/json": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_competitions__get: {
    responses: {
      /** @description List all competitions */
      200: {
        content: {
          "application/json": (components["schemas"]["CompetitionPublicExport"])[];
        };
      };
    };
  };
  /** Get By Id */
  get_by_id_competitions__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Competition */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_competitions__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a Competition */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_competitions__id__patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitionNew"];
      };
    };
    responses: {
      /** @description Update a competition */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_competitions_new_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitionNew"];
      };
    };
    responses: {
      /** @description Add new Competition */
      201: {
        content: {
          "application/json": components["schemas"]["CompetitionExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Pilots */
  patch_pilots_competitions__id__pilots_patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (number)[];
      };
    };
    responses: {
      /** @description Replace the pilot's list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Teams */
  patch_teams_competitions__id__teams_patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the teams's list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Judges */
  patch_judges_competitions__id__judges_patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the judge's list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Repeatable Tricks */
  patch_repeatable_tricks_competitions__id__repeatable_tricks_patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the repeatable tricks list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Config */
  patch_config_competitions__id__config_patch: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitionConfig"];
      };
    };
    responses: {
      /** @description Replace the competition config */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Open */
  open_competitions__id__open_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Open a competition (change status from not started to open) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Close */
  close_competitions__id__close_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Close a competition (change status from open to close) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Close */
  close_competitions__id__reopen_post: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Reopen a closed competition (change status from close to open) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** New Run */
  new_run_competitions__id__runs_new_post: {
    parameters: {
      query?: {
        pilots_to_qualify?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Create a new run for a competition */
      201: {
        content: {
          "application/json": components["schemas"]["RunExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Run */
  get_run_competitions__cid__runs__rid__get: {
    parameters: {
      path: {
        cid: string;
        rid: number;
      };
    };
    responses: {
      /** @description Retrieve a run */
      200: {
        content: {
          "application/json": components["schemas"]["RunExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Run Pilots */
  patch_run_pilots_competitions__id__runs__i__pilots_patch: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    requestBody: {
      content: {
        "application/json": (number)[];
      };
    };
    responses: {
      /** @description Replace the run pilots list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Run Teams */
  patch_run_teams_competitions__id__runs__i__teams_patch: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the run teams list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Run Judges */
  patch_run_judges_competitions__id__runs__i__judges_patch: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the run judges list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Run Repeatable Tricks */
  patch_run_repeatable_tricks_competitions__id__runs__i__repeatable_tricks_patch: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    requestBody: {
      content: {
        "application/json": (string)[];
      };
    };
    responses: {
      /** @description Replace the run repeatable tricks list */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Patch Run Config */
  patch_run_config_competitions__id__runs__i__config_patch: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompetitionConfig"];
      };
    };
    responses: {
      /** @description Replace the run config */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Open */
  run_open_competitions__id__runs__i__open_post: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    responses: {
      /** @description Open a run (change status from not started to open) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Close */
  run_close_competitions__id__runs__i__close_post: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    responses: {
      /** @description Close a run (change status from not started to open) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Reopen */
  run_reopen_competitions__id__runs__i__reopen_post: {
    parameters: {
      path: {
        id: string;
        i: number;
      };
    };
    responses: {
      /** @description Reopen a run (change status from not started to open) */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Flight Get */
  flight_get_competitions__id__runs__i__flights__pilot_team_id__get: {
    parameters: {
      path: {
        id: string;
        i: number;
        pilot_team_id: unknown;
      };
    };
    responses: {
      /** @description retrieve a specific flight from a pilot */
      200: {
        content: {
          "application/json": components["schemas"]["Flight"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Flight Save */
  flight_save_competitions__id__runs__i__flights__pilot_team_id__new_post: {
    parameters: {
      query: {
        save: boolean;
        published?: boolean;
      };
      path: {
        id: string;
        i: number;
        pilot_team_id: unknown;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightNew"];
      };
    };
    responses: {
      /** @description Simulate a run and get the detail score */
      200: {
        content: {
          "application/json": components["schemas"]["FinalMarkExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get All Results */
  get_all_results_competitions__id__results_get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Retrieve the results of the competition */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionResultsExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Export Results */
  get_export_results_competitions__id__results_export_get: {
    parameters: {
      query?: {
        limit_run?: number;
        filetype?: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Rietrieve the results of the competition */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Get Results */
  run_get_results_competitions__id__results__i__get: {
    parameters: {
      query?: {
        published_only?: boolean;
      };
      path: {
        id: string;
        i: number;
      };
    };
    responses: {
      /** @description Retrieve the results of a specific run of competition */
      200: {
        content: {
          "application/json": components["schemas"]["RunResultsExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Run Get Results */
  run_get_results_competitions__id__results__i__export_get: {
    parameters: {
      query?: {
        filetype?: string;
      };
      path: {
        id: string;
        i: number;
      };
    };
    responses: {
      /** @description export the results of a specific run of competition */
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Simulate */
  simulate_scores_simulate__t__post: {
    parameters: {
      path: {
        t: components["schemas"]["CompetitionType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FlightNew"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FinalMark"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Test */
  test_public_test_get: {
    responses: {
      /** @description Successful Response */
      200: never;
    };
  };
  /** List Pilots */
  list_pilots_public_pilots__get: {
    responses: {
      /** @description List all public */
      200: {
        content: {
          "application/json": (components["schemas"]["Pilot"])[];
        };
      };
    };
  };
  /** Get Pilot */
  get_pilot_public_pilots__civlid__get: {
    parameters: {
      path: {
        civlid: number;
      };
    };
    responses: {
      /** @description Get a Pilot */
      200: {
        content: {
          "application/json": components["schemas"]["PilotWithResults"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Teams */
  list_teams_public_teams__get: {
    responses: {
      /** @description List all teams */
      200: {
        content: {
          "application/json": (components["schemas"]["TeamExport"])[];
        };
      };
    };
  };
  /** Get Team */
  get_team_public_teams__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Team */
      200: {
        content: {
          "application/json": components["schemas"]["TeamExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Judges */
  list_judges_public_judges__get: {
    responses: {
      /** @description List all judges */
      200: {
        content: {
          "application/json": (components["schemas"]["Judge"])[];
        };
      };
    };
  };
  /** Get Judge */
  get_judge_public_judges__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Judge */
      200: {
        content: {
          "application/json": components["schemas"]["Judge"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Competitions */
  list_competitions_public_competitions__get: {
    responses: {
      /** @description List all competitions */
      200: {
        content: {
          "application/json": (components["schemas"]["CompetitionPublicExport"])[];
        };
      };
    };
  };
  /** Get Competition */
  get_competition_public_competitions__id__get: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Competition */
      200: {
        content: {
          "application/json": components["schemas"]["CompetitionPublicExportWithResults"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Seasons */
  list_seasons_public_seasons__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
    };
    responses: {
      /** @description List all seasons */
      200: {
        content: {
          "application/json": (components["schemas"]["SeasonExport"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Season */
  get_season_public_seasons__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Season */
      200: {
        content: {
          "application/json": components["schemas"]["SeasonExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_public_tricks__get: {
    parameters: {
      query?: {
        repeatable?: boolean;
      };
    };
    responses: {
      /** @description List all tricks */
      200: {
        content: {
          "application/json": (components["schemas"]["Trick"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Backup */
  backup_utils_backup_get: {
    responses: {
      /** @description backup all database */
      200: never;
    };
  };
  /** Backup */
  backup_utils_cleanup_pilots_post: {
    responses: {
      /** @description backup all database */
      204: never;
    };
  };
  /** Get File */
  get_file_files__id__get: {
    parameters: {
      query?: {
        download?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_files__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a File */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Post File */
  post_file_files_new_post: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_post_file_files_new_post"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FileID"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List */
  list_seasons__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
    };
    responses: {
      /** @description List all seasons */
      200: {
        content: {
          "application/json": (components["schemas"]["SeasonExport"])[];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get */
  get_seasons__id__get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Season */
      200: {
        content: {
          "application/json": components["schemas"]["Season"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update */
  update_seasons__id__put: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Season"];
      };
    };
    responses: {
      /** @description update Season */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete */
  delete_seasons__id__delete: {
    parameters: {
      query?: {
        restore?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Delete a Season */
      204: never;
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Export */
  export_seasons__id__export_get: {
    parameters: {
      query?: {
        deleted?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Get a Season */
      200: {
        content: {
          "application/json": components["schemas"]["SeasonExport"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create */
  create_seasons_new_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["Season"];
      };
    };
    responses: {
      /** @description Add new Season */
      201: {
        content: {
          "application/json": components["schemas"]["Season"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Home */
  home__get: {
    responses: {
      /** @description home page */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
}
